# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    fidustream_video.repository:
        class: FIDUSTREAM\VideoBundle\Repository\VideoRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - FIDUSTREAM\VideoBundle\Entity\Video
    fidustream_video.workflow.resolution_consumer:
        class: FIDUSTREAM\VideoBundle\Workflow\ResolutionConsumer
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@state_machine.video_publishing"
            - "@fidustream_video.repository"
            - "@filesystem"
            - "@kernel"
    fidustream_video.workflow.workflow_consumer:
        class: FIDUSTREAM\VideoBundle\Workflow\WorkflowConsumer
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@state_machine.video_publishing"
            - "@fidustream_video.repository"
            - "@filesystem"
            - "@kernel"

    fidustream_video.workflow.workflow_transcoder:
        class: FIDUSTREAM\VideoBundle\Workflow\WorkflowTranscoder
        arguments:
            - "@logger"
            - "@doctrine.orm.entity_manager"
            - "@old_sound_rabbit_mq.workflow_transcoder_producer"
            - "@filesystem"
    
    fidustream_video.workflow.resolution_transcoder:
        class: FIDUSTREAM\VideoBundle\Workflow\ResolutionTranscoder
        arguments:
            - "@logger"
            - "@doctrine.orm.entity_manager"
            - "@old_sound_rabbit_mq.resolution_transcoder_producer"
            - "@filesystem"
            
        
    fidustream_video.workflow.workflow_listener:
         class: FIDUSTREAM\VideoBundle\Workflow\WorkflowListener
         arguments:
            - "@fidustream_video.workflow.workflow_transcoder"
            - "@fidustream_video.workflow.resolution_transcoder"

         tags:
            - { name: kernel.event_subscriber }
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
